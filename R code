# incubation period
f_inc <- function(u) {
  dlnorm(u, meanlog = log(11.3^2 / sqrt(2.37 + 11.3^2)), sdlog = sqrt(log(1 + 2.37/11.3^2)))
}

# observed serial interval
serial_intervals <- c(12, 12, 14, 11, 16, 14, 17)

# serial interval from United Kingdom
serial_data <- read.csv("Simpson1952.csv")
serial_intervals <- rep(serial_data$Interval, serial_data$Frequency)

em_estim <- function(rho_init, serial_intervals, f_inc, max_iter=1000, eps=0.001) {
  rho <- rho_init
  for (iter in 1:max_iter) {
    # E-step
    p <- matrix(0, nrow=length(serial_intervals), ncol=7)
    for (i in 1:length(serial_intervals)) {
      si <- serial_intervals[i]

      for (u in seq(-1, si-0.001, 0.001)) {

        if (u >= -5 && u < -1) p[i,1] <- p[i,1] + f_inc(si-u)
        if (u >= -1 && u < 0) p[i,2] <- p[i,2] + f_inc(si-u)
        if (u >= 0 && u < 3) p[i,3] <- p[i,3] + f_inc(si-u)  
        if (u >= 3 && u < 6) p[i,4] <- p[i,4] + f_inc(si-u)
        if (u >= 6 && u < 9) p[i,5] <- p[i,5] + f_inc(si-u)  
        if (u >= 9 && u < 12) p[i,6] <- p[i,6] + f_inc(si-u) 
        if (u >= 12 && u < 15) p[i,7] <- p[i,7] + f_inc(si-u)
      }
    }
    
    p <- p * rho
    
    p <- p / rowSums(p)
    
    # M-step
    rho_new <- colSums(p) / sum(colSums(p) * c(4,1,3,3,3,3,3))
    
    if (max(abs(rho_new - rho), na.rm = TRUE) < 1e-04) break
    rho <- rho_new
  }
  return(rho)  
}

init <- c(0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1)
res <- em_estim(init, serial_intervals, f_inc)

rho1 <- res[1]; rho2 <- res[2]; rho3 <- res[3]; rho4 <- res[4]; rho5 <- res[5]; rho6 <- res[6]; rho7 <- res[7]
rho1
rho2
rho3
rho4
rho5
rho6
rho7

rho2*1 + rho3*3 + rho4*3

library(foreach)
library(doParallel)

n_bootstrap <- 1000
n_params <- 7

rho_bootstrap <- matrix(0, nrow=n_bootstrap, ncol=n_params)

n_cores <- detectCores()
cl <- makeCluster(n_cores)
registerDoParallel(cl)

rho_bootstrap <- foreach(b = 1:n_bootstrap, .combine = rbind) %dopar% {
  serial_intervals_b <- sample(serial_intervals, replace=TRUE)
  em_estim(init, serial_intervals_b, f_inc)
}

stopCluster(cl)

rho_lower <- apply(rho_bootstrap, 2, quantile, 0.025)
rho_upper <- apply(rho_bootstrap, 2, quantile, 0.975)
rho1_ci <- c(rho_lower[1], rho_upper[1])
rho2_ci <- c(rho_lower[2], rho_upper[2])
rho3_ci <- c(rho_lower[3], rho_upper[3])
rho4_ci <- c(rho_lower[4], rho_upper[4])
rho5_ci <- c(rho_lower[5], rho_upper[5])
rho6_ci <- c(rho_lower[6], rho_upper[6])
rho7_ci <- c(rho_lower[7], rho_upper[7])

rho1_ci
rho2_ci
rho3_ci
rho4_ci
rho5_ci
rho6_ci
rho7_ci

rho_esti <- c(rho1, rho2, rho3, rho4, rho5, rho6, rho7,0,0)
rho_ci_lower <- c(rho_lower[1],rho_lower[2], rho_lower[3], rho_lower[4], rho_lower[5], rho_lower[6],rho_lower[7],0,0) 
rho_ci_upper <- c(rho_upper[1],rho_upper[2],rho_upper[3],rho_upper[4],rho_upper[5],rho_upper[6],rho_upper[7],0,0)

rho_Simpson2003 <- data.frame(rho_esti,rho_ci_lower, rho_ci_upper)
saveRDS(rho_Simpson2003, file = "rho_Simpson2003.obj")

rho_Simpson2003 <- readRDS("rho_Simpson2003.obj")
rho_esti <- rho_Simpson2003$rho_esti
rho_ci_lower <- rho_Simpson2003$rho_ci_lower
rho_ci_upper <- rho_Simpson2003$rho_ci_upper

days <- c(-5, -1, 0, 3, 6, 9, 12, 15, 16)
d = data.frame(x=days,y=rho_esti)
d_low = data.frame(x=days, y=rho_ci_lower) 
d_upp = data.frame(x=days, y=rho_ci_upper) 

ggplot()+
  geom_step(data=d, mapping = aes(x=x,y=y), lwd = 2 ) +
  geom_step(data=d_low, mapping = aes(x=x,y=y), linetype = 3, lwd = 1) +
  geom_step(data=d_upp, mapping = aes(x=x,y=y), lwd = 1) +
  scale_x_continuous(breaks = c(-5,-4,-3,-2,-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16)) +
  scale_y_continuous(limits = c(0, 0.3)) +
  theme_classic() +
  xlab("Disease age (days)")+
  ylab("Frequency of secondary transimission")+
  theme(text = element_text(size = 18),axis.ticks=element_line(colour = "black"),
        axis.text=element_text(colour = "black"))

################################################################################
library(surveillance)

start_date <- as.Date("2024-01-01")
onset <- as.Date(c("2024-02-20","2024-03-03", "2024-03-03", "2024-03-05", "2024-03-02", "2024-03-07", "2024-03-05", "2024-03-07"))
symptomTimes <- as.numeric(onset - start_date)

#Generate an artificial outbreak of size n starting at time t0 and being of length
n <- 9 ; t0 <- 50 ; l <- 50

# Incubation period
dmax <- 30
inc.pmf <- dlnorm(0:dmax, meanlog = log(11.3^2 / sqrt(11.3^2 + 2.37)), sdlog = sqrt(log(1 + 2.37/11.3^2)))

#Function to sample from the incubation time
rincu <- function(n) {
  sample(0:dmax, size=n, replace=TRUE, prob=inc.pmf)
}
#Sample time of exposure and length of incubation time
set.seed(123)
exposureTimes <- t0 + sample(x=0:(l-1),size=n,replace=TRUE)
symptomTimes <- symptomTimes

#Time series of exposure (truth) and symptom onset (observed)
X <- table( factor(exposureTimes,levels=1:(max(symptomTimes)+dmax)))
Y <- table( factor(symptomTimes,levels=1:(max(symptomTimes)+dmax)))

Ysts <- sts(Y)

#Plot the outbreak
plot(Ysts, xaxis.labelFormat=NULL, legend=NULL)
#Add true number of exposures to the plot
lines(1:length(Y)+0.2,X,col="red",type="h",lty=2)


#Helper function to show the EM step
plotIt <- function(cur.sts) {
  plot(cur.sts,xaxis.labelFormat=NULL, legend.opts=NULL,ylim=c(0,20))
}

#Call non-parametric back-projection function with hook function but
#without bootstrapped confidence intervals
bpnp.control <- list(k=0,eps=rep(0.005,2),iter.max=rep(250,2),B=-1,hookFun=plotIt,verbose=TRUE)

#Fast C version (use argument: eq3a.method="C")! 
sts.bp <- backprojNP(Ysts, incu.pmf=inc.pmf,
                     control=modifyList(bpnp.control,list(eq3a.method="C")), ylim=c(0,max(X,Y)))

#Show result
plot(sts.bp,xaxis.labelFormat=NULL,legend=NULL,lwd=c(1,1,2),lty=c(1,1,1),main="")
lines(1:length(Y)+0.2,X,col="red",type="h",lty=2)


#Do the convolution for the expectation
mu <- matrix(0,ncol=ncol(sts.bp),nrow=nrow(sts.bp))
#Loop over all series
for (j in 1:ncol(sts.bp)) { 
  #Loop over all time points
  for (t in 1:nrow(sts.bp)) {
    #Convolution, note support of inc.pmf starts at zero (move idx by 1)
    i <- seq_len(t)
    mu[t,j] <- sum(inc.pmf[t-i+1] * upperbound(sts.bp)[i,j],na.rm=TRUE)
  }
}
#Show the fit
lines(1:nrow(sts.bp)-0.5,mu[,1],col="green",type="s",lwd=3)

#Non-parametric back-projection including boostrap CIs
bpnp.control2 <- modifyList(bpnp.control, list(hookFun=NULL, k=2,
                                               B=1000, # in practice, use B >= 1000 !
                                               eq3a.method="C"))
sts.bp2 <- backprojNP(Ysts, incu.pmf=inc.pmf, control=bpnp.control2)


plot.stsBP <- function(stsBP) {
  maxy <- max(observed(stsBP),upperbound(stsBP),stsBP@ci,na.rm=TRUE)
  plot(upperbound(stsBP),type="n",ylim=c(0,maxy), ylab="Cases",xlab="time")
  if (!all(is.na(stsBP@ci))) {
    polygon( c(1:nrow(stsBP),rev(1:nrow(stsBP))),
             c(stsBP@ci[2,,1],rev(stsBP@ci[1,,1])),col="lightgray")
  }
  lines(upperbound(stsBP),type="l",lwd=2)
  legend(x="topright",c(expression(lambda[t])),lty=c(1),col=c(1),fill=c(NA),border=c(NA),lwd=c(2))
  
  invisible()
}

#Plot the result of k=0 and add truth for comparison. No CIs available
plot.stsBP(sts.bp)
lines(1:length(Y),X,col=2,type="h")
#Same for k=2
plot.stsBP(sts.bp2)
lines(1:length(Y),X,col=2,type="h")

exposure_counts <- round(sts.bp2@upperbound, digits = 0)
dates <- seq(as.Date("2024-01-01"), by = "day", length.out = 96)
exposure_counts_vector <- as.vector(exposure_counts)
exposure_df <- data.frame(Date = dates, Count = exposure_counts_vector)

exposure_df <- exposure_df[exposure_df$Count > 0, ]

print(exposure_df)

infection <- as.vector(sts.bp2@upperbound)
infection_CI_lower <- as.vector(sts.bp2@ci[1,,1])
infection_CI_upper <- as.vector(sts.bp2@ci[2,,1])

# dataframe
result_df <- data.frame(
  time = seq(as.Date("2024-01-01"), by = "day", length.out = 96),
  infection = infection,
  CI_lower = infection_CI_lower,
  CI_upper = infection_CI_upper
)

# plot B2
library(ggplot2)
library(dplyr)

bt <- data.frame(time=seq(as.Date("2024-01-01"), by = "day", length.out = 96),
                 bt_esti = sts.bp2@upperbound,
                 bt_lower = sts.bp2@ci[1,,1],
                 bt_upper = sts.bp2@ci[2,,1])

bt_filtered <- bt %>%
  filter(time >= as.Date("2024-02-01") & time <= as.Date("2024-03-10"))


ggplot(bt_filtered, aes(x = time)) +
  geom_line(aes(y = bt_esti), color = "black", linewidth = 1) +
  geom_line(aes(y = bt_lower), color = "black", linewidth = 0.5) +
  geom_line(aes(y = bt_upper), color = "black", linewidth = 0.5) +
  geom_ribbon(aes(ymin = pmin(bt_lower, 3), ymax = pmin(bt_upper, 3)), fill = "gray80", alpha = 0.5) +
  labs(x = "Date of infection", y = "Secondary transmission") +
  scale_y_continuous(limits = c(0, 3)) +
  scale_x_date(date_labels = "%b-%d", date_breaks = "5 day") +
  coord_cartesian(ylim = c(0, 3), clip = "off") +
  theme_classic() +
  theme(text = element_text(size = 18),axis.ticks=element_line(colour = "black"),
        axis.text=element_text(colour = "black"))+
  theme(axis.text.x = element_text(angle = 45, hjust = 1),
        plot.margin = unit(c(1, 1, 1, 1), "lines"))

################################################################################
# calculate Rt

onset_dates <- c("2024-02-20", "2024-03-03", "2024-03-03", "2024-03-05", "2024-03-02", "2024-03-07", "2024-03-05", "2024-03-07")
date_range <- seq(as.Date("2024-01-01"), by = "day", length.out = 96)
result_Rt <- data.frame(date = date_range)

###A(t)###
days_since_onset <- as.numeric(date_range - as.Date(onset_dates))

rho_At <- matrix(c(rho1, rho2, rho3, rho4, rho5, rho6, rho7), nrow = 1)
total_infectiousness_At <- rep(0, length(date_range))

for (onset_date in onset_dates) {
  days_since_onset <- as.numeric(date_range - as.Date(onset_date))
  
  infectiousness_At <- ifelse(days_since_onset >= -5 & days_since_onset < -1, rho1,
                              ifelse(days_since_onset >= -1 & days_since_onset < 0, rho2,
                                     ifelse(days_since_onset >= 0 & days_since_onset < 3, rho3,
                                            ifelse(days_since_onset >= 3 & days_since_onset < 6, rho4,
                                                   ifelse(days_since_onset >= 6 & days_since_onset < 9, rho5,
                                                          ifelse(days_since_onset >= 9 & days_since_onset < 12, rho6, 
                                                                 ifelse(days_since_onset >= 12 & days_since_onset < 15, rho7, 0)))))))

  total_infectiousness_At <- total_infectiousness_At + infectiousness_At
}


###B(t)###
sts.bp2@upperbound

Rt <- data.frame(date = date_range, R_t = sts.bp2@upperbound / total_infectiousness_At)

################################################################################

#calculate 95% confidence interval of Rt
onset_dates <- c("2024-02-20", "2024-03-03", "2024-03-03", "2024-03-05", "2024-03-02", "2024-03-07", "2024-03-05", "2024-03-07")

date_range <- seq(as.Date("2024-01-01"), by = "day", length.out = 96)

result <- data.frame(date = date_range)

for (i in 1:1000) {
  total_infectiousness <- rep(0, length(date_range))
  
  for (onset_date in onset_dates) {
    days_since_onset <- as.numeric(date_range - as.Date(onset_date))
    
    infectiousness <- ifelse(days_since_onset >= -5 & days_since_onset < -1, rho_bootstrap[i,1],
                             ifelse(days_since_onset >= -1 & days_since_onset < 0, rho_bootstrap[i,2],
                                    ifelse(days_since_onset >= 0 & days_since_onset < 3, rho_bootstrap[i,3],
                                           ifelse(days_since_onset >= 3 & days_since_onset < 6, rho_bootstrap[i,4],
                                                  ifelse(days_since_onset >= 6 & days_since_onset < 9, rho_bootstrap[i,5],
                                                         ifelse(days_since_onset >= 9 & days_since_onset < 12, rho_bootstrap[i,6],
                                                                ifelse(days_since_onset >= 12 & days_since_onset < 15, rho_bootstrap[i,7], 0)))))))

    total_infectiousness <- total_infectiousness + infectiousness
  }

  result[[paste0("rho_", i)]] <- total_infectiousness
}

output <- data.frame(date = result$date, 
                     lower_25 = numeric(length(result$date)),
                     upper_975 = numeric(length(result$date)))

for (i in 1:length(result$date)) {
  rho_values <- as.numeric(result[i, paste0("rho_", 1:1000)])
  sorted_rho <- sort(rho_values)
  
  output$lower_25[i] <- sorted_rho[25]
  output$upper_975[i] <- sorted_rho[975]
}

library(dplyr)

At <- data.frame(x = result$date, 
                 At_esti = total_infectiousness_At,
                 At_lower = output$lower_25,
                 At_upper = output$upper_975)

At_filtered <- At %>%
  filter(x >= as.Date("2024-02-01") & x <= as.Date("2024-03-25"))

# A(t)
ggplot(At_filtered, aes(x = x)) +
  geom_line(aes(y = At_esti), color = "black", size = 1) +
  geom_line(aes(y = At_lower), color = "black", size = 0.5) +
  geom_line(aes(y = At_upper), color = "black", size = 0.5) +
  geom_ribbon(aes(ymin = pmin(At_lower, 3), ymax = pmin(At_upper, 3)), fill = "gray80", alpha = 0.5) +
  labs(x = "Calendar time", y = "Infectiousness") +
  scale_y_continuous(limits = c(0, 2)) +
  scale_x_date(date_labels = "%b-%d", date_breaks = "5 day") +
  coord_cartesian(ylim = c(0, 2), clip = "off") +
  theme_classic() +
  theme(text = element_text(size = 18),axis.ticks=element_line(colour = "black"),
        axis.text=element_text(colour = "black"))+
  theme(axis.text.x = element_text(angle = 45, hjust = 1),
        plot.margin = unit(c(1, 1, 1, 1), "lines"))


#B(t)
#sts.bp2@lambda[,,1]

result_divided <- data.frame(date = result$date)
for (i in 1:1000) {
  result_divided[[paste0("rho_", i)]] <- sts.bp2@lambda[,,i] / result[[paste0("rho_", i)]]
}

result_divided

result_percentiles <- data.frame(
  Calendar = seq(as.Date("2024-01-01"), by = "day", length.out = 96),
  lower_25th = numeric(96),
  upper_975th = numeric(96)
)

for (i in 1:96) {
  values <- sapply(1:1000, function(j) result_divided[[paste0("rho_", j)]][i])

  sorted_values <- sort(values, decreasing = TRUE)

  result_percentiles$lower_25th[i] <- sorted_values[975]
  result_percentiles$upper_975th[i] <- sorted_values[25]
}

result_percentiles

# Rt
library(ggplot2)

Rt_ci <- data.frame(time=seq(as.Date("2024-01-01"), by = "day", length.out = 96), 
                    RT=Rt$R_t, 
                    lower=result_percentiles$lower_25th, 
                    upper=result_percentiles$upper_975th)


Rt_ci_filtered <- Rt_ci %>%
  filter(time >= as.Date("2024-02-16") & time <= as.Date("2024-03-10"))

Rt_ci_filtered$RT[is.infinite(Rt_ci_filtered$RT)] <- 0
Rt_ci_filtered$lower[is.infinite(Rt_ci_filtered$lower)] <- 0
Rt_ci_filtered$upper[is.infinite(Rt_ci_filtered$upper)] <- 0

Rt_ci_filtered

rt_fig2 <- ggplot(Rt_ci_filtered, aes(x = time)) +
  geom_line(aes(y = RT), color = "black", size = 1.1) +
  geom_ribbon(aes(ymin = pmin(lower, 30), ymax = pmin(upper, 30)), fill = "gray80", alpha = 0.5) +
  labs(x = "Calendar time", y = "Effective reproduction number") +
  scale_y_continuous(limits = c(0, 30)) +
  scale_x_date(date_labels = "%b-%d", date_breaks = "1 day") +
  coord_cartesian(ylim = c(0, 30), clip = "off") +
  theme_classic() +
  theme(text = element_text(size = 18),axis.ticks=element_line(colour = "black"),
        axis.text=element_text(colour = "black")) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1),
        plot.margin = unit(c(1, 1, 1, 1), "lines"))

rt_fig2

onset_dates <- c("2024-02-20", "2024-03-03", "2024-03-03", "2024-03-05", "2024-03-02", "2024-03-08", "2024-03-07", "2024-03-05", "2024-03-07")

date_range <- seq(as.Date("2024-02-17"), as.Date("2024-03-11"), by = "day")
count_data <- data.frame(date = as.Date(onset_dates)) %>%
  group_by(date) %>%
  summarise(count = n()) %>%
  right_join(data.frame(date = date_range), by = "date") %>%
  replace_na(list(count = 0))

ggplot(count_data, aes(x = date, y = count)) +
  geom_col() +
  scale_x_date(date_labels = "%b-%d", date_breaks = "1 day") +
  scale_y_continuous(limits = c(0, 5), expand = c(0, 0)) +
  labs(x = "Date of illness onset", y = "Daily counts of cases") +
  theme_classic() +
  theme(
    text = element_text(size = 14),
    axis.ticks = element_line(colour = "black"),
    axis.text = element_text(colour = "black"),
    axis.text.x = element_text(angle = 45, hjust = 1),
    axis.text.y = element_text(size = 14),
    plot.margin = unit(c(1, 1, 1, 1), "lines")
  )

Rt_ci_filtered2 <- readRDS("Rt_ci_filtered2.obj")
Rt_ci_filtered$rt2 = Rt_ci_filtered2$RT
Rt_ci_filtered$lower2 = Rt_ci_filtered2$lower
Rt_ci_filtered$upper2 = Rt_ci_filtered2$upper

rt2 <- rt2 %>%
  filter(date >= as.Date("2024-02-16") & date <= as.Date("2024-03-10"))
rt2$R_t[is.infinite(rt2$R_t)] <- 0
Rt_ci_filtered$lower[is.infinite(Rt_ci_filtered$lower)] <- 0
Rt_ci_filtered$upper[is.infinite(Rt_ci_filtered$upper)] <- 0



fig3 <- ggplot(Rt_ci_filtered, aes(x = time)) +
  geom_line(aes(y = RT), color = "black", size = 1.1) +
  geom_line(aes(y = rt2), color = "black", size = 1.1,linetype="twodash") +
  geom_ribbon(aes(ymin = pmin(lower, 30), ymax = pmin(upper, 30)), fill = "gray80", alpha = 0.5) +
  #geom_ribbon(aes(ymin = pmin(lower2, 30), ymax = pmin(upper2, 30)), fill = "gray40", alpha = 0.5) +
  labs(x = "Calendar time", y = "Effective reproduction number") +
  scale_y_continuous(limits = c(0, 30)) +
  scale_x_date(date_labels = "%b-%d", date_breaks = "5 day") +
  coord_cartesian(ylim = c(0, 30), clip = "off") +
  theme_classic() +
  theme(text = element_text(size = 18),axis.ticks=element_line(colour = "black"),
        axis.text=element_text(colour = "black")) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1),
        plot.margin = unit(c(1, 1, 1, 1), "lines"))
  



dates <- seq(as.Date("2024-02-01"), as.Date("2024-03-25"), by = "day")
n_boots <- 1000
rhoci <- data.frame(rho1 = rho_esti[1] + rnorm(n_boots, 0, sd = (rho_ci_upper[1] - rho_ci_lower[1])/3.92),
                    rho2 = rho_esti[2] + rnorm(n_boots, 0, sd = (rho_ci_upper[2] - rho_ci_lower[2])/3.92),
                    rho3 = rho_esti[3] + rnorm(n_boots, 0, sd = (rho_ci_upper[3] - rho_ci_lower[3])/3.92),
                    rho4 = rho_esti[4] + rnorm(n_boots, 0, sd = (rho_ci_upper[4] - rho_ci_lower[4])/3.92),
                    rho5 = rho_esti[5] + rnorm(n_boots, 0, sd = (rho_ci_upper[5] - rho_ci_lower[5])/3.92),
                    rho6 = rho_esti[6] + rnorm(n_boots, 0, sd = (rho_ci_upper[6] - rho_ci_lower[6])/3.92),
                    rho7 = rho_esti[7] + rnorm(n_boots, 0, sd = (rho_ci_upper[7] - rho_ci_lower[7])/3.92))


infectiousness_boot <- sapply(1:n_boots, function(b) {
  sapply(dates, function(date) {
    days_since_onset <- as.numeric(date - as.Date(onset_dates))
    infectiousness_At <- ifelse(days_since_onset >= -5 & days_since_onset < -1, rhoci$rho1[b],
                                ifelse(days_since_onset >= -1 & days_since_onset < 0, rhoci$rho2[b],
                                       ifelse(days_since_onset >= 0 & days_since_onset < 3, rhoci$rho3[b],
                                              ifelse(days_since_onset >= 3 & days_since_onset < 6, rhoci$rho4[b],
                                                     ifelse(days_since_onset >= 6 & days_since_onset < 9, rhoci$rho5[b],
                                                            ifelse(days_since_onset >= 9 & days_since_onset < 12, rhoci$rho6[b],
                                                                   ifelse(days_since_onset >= 12 & days_since_onset < 15, rhoci$rho7[b], 0)))))))
    sum(infectiousness_At)
  })
})

result2 <- data.frame(date = dates, 
                     infectiousness = apply(infectiousness_boot, 1, mean),
                     lower_ci = apply(infectiousness_boot, 1, quantile, 0.025),
                     upper_ci = apply(infectiousness_boot, 1, quantile, 0.975))

print(result)

result2 <- result2 %>%
  mutate(lower_ci = ifelse(lower_ci < 0.001, 0, lower_ci))

ggplot(result2, aes(x = date)) +
  geom_line(aes(y = infectiousness), color = "black", size = 1) +
  geom_line(aes(y = lower_ci), color = "black", size = 0.5) +
  geom_line(aes(y = upper_ci), color = "black", size = 0.5) +
  geom_ribbon(aes(ymin = pmin(lower_ci, 1), ymax = pmin(upper_ci, 3)), fill = "gray80", alpha = 0.5) +
  labs(x = "Calendar time", y = "Infectiousness") +
  scale_y_continuous(limits = c(0, 2)) +
  scale_x_date(date_labels = "%b-%d", date_breaks = "5 day") +
  coord_cartesian(ylim = c(0, 2), clip = "off") +
  theme_classic() +
  theme(text = element_text(size = 18),axis.ticks=element_line(colour = "black"),
        axis.text=element_text(colour = "black"))+
  theme(axis.text.x = element_text(angle = 45, hjust = 1),
        plot.margin = unit(c(1, 1, 1, 1), "lines"))
